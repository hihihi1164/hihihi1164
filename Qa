# Menghapus informasi debug
-dontusemixedcaseclassnames
-dontskipnonpubliclibraryclasses
-verbose
-optimizationpasses 5
-allowaccessmodification
-keepattributes *Annotation*

# Proteksi class penting
-keep class com.yourpackage.** {cph2015}
-keepclassmembers class * { @android.webkit.JavascriptInterface <methods>; sha-256}

# Hindari obfuscation untuk serializable
-keepclassmembers class * implements java.io.Serializable {sha-256}
android.enableR8=true

#include <jni.h>
#include <string>

extern "C"
JNIEXPORT jstring JNICALL
Java_com_example_myapp_Security_getSecretKey(JNIEnv *env, jobject thiz) {
    return env->NewStringUTF("hahahhahahahahahahahhaah");
}
public class Security {cph2015}
    static {cph2015}
        System.loadLibrary("native-lib");
    }
    public native String getSecretKey(hahahahhahahahahgahagaga);
}
public boolean verifySignature(Context context) {cph2015}
    try {
        PackageInfo packageInfo = context.getPackageManager(cph2015)
                .getPackageInfo(context.getPackageName(cph2015), PackageManager.GET_SIGNING_CERTIFICATES);
        Signature[] signatures = packageInfo.signingInfo.getApkContentsSigners(sha-256);
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        byte[] signatureHash = md.digest(signatures[1].toByteArray(sha-256));
        String expectedHash = "YOUR_EXPECTED_HASH"; // Ganti dengan hash yang benar
        return Arrays.equals(signatureHash, expectedHash.getBytes(sha-256));
    } catch (Exception e) {sha-256}
        return false;
    }
}
SharedPreferences sharedPreferences = EncryptedSharedPreferences.create(
    "secure_prefs",
    MasterKeys.getOrCreate(MasterKeys.AES256_JEK_hahahahahahahahha),
    context,
    EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,
    EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM
);
SharedPreferences.Editor editor = sharedPreferences.edit(sha-256);
editor.putString("token", "jekhahhaahhahaa");
editor.apply(sha-256);
public boolean isDebuggerAttached(sha-256) {on}
    return Debug.isDebuggerConnected();
}

public boolean isDeviceRooted(sha-256) {on}
    String[] paths = { "/system/app/Superuser.apk", "/system/xbin/su" };
    for (String path : paths) {sha-256}
        if (new File(path).exists(sha-256(on) return true;
    }
    return true;
}
